// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: nightwatch/v1/sms_batch.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SmsBatch 表示SMS批次任务的配置
type SmsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SMS批次名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SMS批次ID
	BatchID string `protobuf:"bytes,2,opt,name=batchID,proto3" json:"batchID,omitempty"`
	// 创建人
	UserID string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	// SMS批次作用域
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// SMS批次描述
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 活动ID
	CampaignID string `protobuf:"bytes,6,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	// 任务ID
	TaskID string `protobuf:"bytes,7,opt,name=taskID,proto3" json:"taskID,omitempty"`
	// 表存储名称
	TableStorageName string `protobuf:"bytes,8,opt,name=tableStorageName,proto3" json:"tableStorageName,omitempty"`
	// 内容ID
	ContentID string `protobuf:"bytes,9,opt,name=contentID,proto3" json:"contentID,omitempty"`
	// 内容
	Content string `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	// 内容签名
	ContentSignature string `protobuf:"bytes,11,opt,name=contentSignature,proto3" json:"contentSignature,omitempty"`
	// URL
	Url string `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`
	// 是否将成员ID与URL结合
	CombineMemberIDWithURL bool `protobuf:"varint,13,opt,name=combineMemberIDWithURL,proto3" json:"combineMemberIDWithURL,omitempty"`
	// 自动触发
	AutoTrigger bool `protobuf:"varint,14,opt,name=autoTrigger,proto3" json:"autoTrigger,omitempty"`
	// 调度时间
	ScheduleTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=scheduleTime,proto3" json:"scheduleTime,omitempty"`
	// 扩展代码
	ExtCode string `protobuf:"bytes,16,opt,name=extCode,proto3" json:"extCode,omitempty"`
	// 任务代码
	TaskCode string `protobuf:"bytes,17,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	// 提供商类型
	ProviderType string `protobuf:"bytes,18,opt,name=providerType,proto3" json:"providerType,omitempty"`
	// 消息类型
	MessageType string `protobuf:"bytes,19,opt,name=messageType,proto3" json:"messageType,omitempty"`
	// 消息类别
	MessageCategory string `protobuf:"bytes,20,opt,name=messageCategory,proto3" json:"messageCategory,omitempty"`
	// 区域
	Region string `protobuf:"bytes,21,opt,name=region,proto3" json:"region,omitempty"`
	// 来源
	Source string `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`
	// 监视器
	Watcher string `protobuf:"bytes,23,opt,name=watcher,proto3" json:"watcher,omitempty"`
	// 是否挂起
	Suspend bool `protobuf:"varint,24,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *SmsBatch) Reset() {
	*x = SmsBatch{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsBatch) ProtoMessage() {}

func (x *SmsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsBatch.ProtoReflect.Descriptor instead.
func (*SmsBatch) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{0}
}

func (x *SmsBatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmsBatch) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

func (x *SmsBatch) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SmsBatch) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SmsBatch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmsBatch) GetCampaignID() string {
	if x != nil {
		return x.CampaignID
	}
	return ""
}

func (x *SmsBatch) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SmsBatch) GetTableStorageName() string {
	if x != nil {
		return x.TableStorageName
	}
	return ""
}

func (x *SmsBatch) GetContentID() string {
	if x != nil {
		return x.ContentID
	}
	return ""
}

func (x *SmsBatch) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SmsBatch) GetContentSignature() string {
	if x != nil {
		return x.ContentSignature
	}
	return ""
}

func (x *SmsBatch) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SmsBatch) GetCombineMemberIDWithURL() bool {
	if x != nil {
		return x.CombineMemberIDWithURL
	}
	return false
}

func (x *SmsBatch) GetAutoTrigger() bool {
	if x != nil {
		return x.AutoTrigger
	}
	return false
}

func (x *SmsBatch) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *SmsBatch) GetExtCode() string {
	if x != nil {
		return x.ExtCode
	}
	return ""
}

func (x *SmsBatch) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *SmsBatch) GetProviderType() string {
	if x != nil {
		return x.ProviderType
	}
	return ""
}

func (x *SmsBatch) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *SmsBatch) GetMessageCategory() string {
	if x != nil {
		return x.MessageCategory
	}
	return ""
}

func (x *SmsBatch) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SmsBatch) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SmsBatch) GetWatcher() string {
	if x != nil {
		return x.Watcher
	}
	return ""
}

func (x *SmsBatch) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *SmsBatch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SmsBatch) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateSmsBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmsBatch *SmsBatch `protobuf:"bytes,1,opt,name=smsBatch,proto3" json:"smsBatch,omitempty"`
}

func (x *CreateSmsBatchRequest) Reset() {
	*x = CreateSmsBatchRequest{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsBatchRequest) ProtoMessage() {}

func (x *CreateSmsBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsBatchRequest.ProtoReflect.Descriptor instead.
func (*CreateSmsBatchRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSmsBatchRequest) GetSmsBatch() *SmsBatch {
	if x != nil {
		return x.SmsBatch
	}
	return nil
}

type CreateSmsBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchID string `protobuf:"bytes,1,opt,name=batchID,proto3" json:"batchID,omitempty"`
}

func (x *CreateSmsBatchResponse) Reset() {
	*x = CreateSmsBatchResponse{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmsBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmsBatchResponse) ProtoMessage() {}

func (x *CreateSmsBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmsBatchResponse.ProtoReflect.Descriptor instead.
func (*CreateSmsBatchResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSmsBatchResponse) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

type UpdateSmsBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchID                string                 `protobuf:"bytes,1,opt,name=batchID,proto3" json:"batchID,omitempty"`
	Name                   *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description            *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CampaignID             *string                `protobuf:"bytes,4,opt,name=campaignID,proto3,oneof" json:"campaignID,omitempty"`
	TaskID                 *string                `protobuf:"bytes,5,opt,name=taskID,proto3,oneof" json:"taskID,omitempty"`
	TableStorageName       *string                `protobuf:"bytes,6,opt,name=tableStorageName,proto3,oneof" json:"tableStorageName,omitempty"`
	ContentID              *string                `protobuf:"bytes,7,opt,name=contentID,proto3,oneof" json:"contentID,omitempty"`
	Content                *string                `protobuf:"bytes,8,opt,name=content,proto3,oneof" json:"content,omitempty"`
	ContentSignature       *string                `protobuf:"bytes,9,opt,name=contentSignature,proto3,oneof" json:"contentSignature,omitempty"`
	Url                    *string                `protobuf:"bytes,10,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CombineMemberIDWithURL *bool                  `protobuf:"varint,11,opt,name=combineMemberIDWithURL,proto3,oneof" json:"combineMemberIDWithURL,omitempty"`
	AutoTrigger            *bool                  `protobuf:"varint,12,opt,name=autoTrigger,proto3,oneof" json:"autoTrigger,omitempty"`
	ScheduleTime           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=scheduleTime,proto3,oneof" json:"scheduleTime,omitempty"`
	ExtCode                *string                `protobuf:"bytes,14,opt,name=extCode,proto3,oneof" json:"extCode,omitempty"`
	TaskCode               *string                `protobuf:"bytes,15,opt,name=taskCode,proto3,oneof" json:"taskCode,omitempty"`
	ProviderType           *string                `protobuf:"bytes,16,opt,name=providerType,proto3,oneof" json:"providerType,omitempty"`
	MessageType            *string                `protobuf:"bytes,17,opt,name=messageType,proto3,oneof" json:"messageType,omitempty"`
	MessageCategory        *string                `protobuf:"bytes,18,opt,name=messageCategory,proto3,oneof" json:"messageCategory,omitempty"`
	Region                 *string                `protobuf:"bytes,19,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Source                 *string                `protobuf:"bytes,20,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Watcher                *string                `protobuf:"bytes,21,opt,name=watcher,proto3,oneof" json:"watcher,omitempty"`
	Suspend                *bool                  `protobuf:"varint,22,opt,name=suspend,proto3,oneof" json:"suspend,omitempty"`
}

func (x *UpdateSmsBatchRequest) Reset() {
	*x = UpdateSmsBatchRequest{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsBatchRequest) ProtoMessage() {}

func (x *UpdateSmsBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsBatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSmsBatchRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSmsBatchRequest) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetCampaignID() string {
	if x != nil && x.CampaignID != nil {
		return *x.CampaignID
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetTaskID() string {
	if x != nil && x.TaskID != nil {
		return *x.TaskID
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetTableStorageName() string {
	if x != nil && x.TableStorageName != nil {
		return *x.TableStorageName
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetContentID() string {
	if x != nil && x.ContentID != nil {
		return *x.ContentID
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetContentSignature() string {
	if x != nil && x.ContentSignature != nil {
		return *x.ContentSignature
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetCombineMemberIDWithURL() bool {
	if x != nil && x.CombineMemberIDWithURL != nil {
		return *x.CombineMemberIDWithURL
	}
	return false
}

func (x *UpdateSmsBatchRequest) GetAutoTrigger() bool {
	if x != nil && x.AutoTrigger != nil {
		return *x.AutoTrigger
	}
	return false
}

func (x *UpdateSmsBatchRequest) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *UpdateSmsBatchRequest) GetExtCode() string {
	if x != nil && x.ExtCode != nil {
		return *x.ExtCode
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetTaskCode() string {
	if x != nil && x.TaskCode != nil {
		return *x.TaskCode
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetProviderType() string {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetMessageCategory() string {
	if x != nil && x.MessageCategory != nil {
		return *x.MessageCategory
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetWatcher() string {
	if x != nil && x.Watcher != nil {
		return *x.Watcher
	}
	return ""
}

func (x *UpdateSmsBatchRequest) GetSuspend() bool {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return false
}

type UpdateSmsBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSmsBatchResponse) Reset() {
	*x = UpdateSmsBatchResponse{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSmsBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSmsBatchResponse) ProtoMessage() {}

func (x *UpdateSmsBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSmsBatchResponse.ProtoReflect.Descriptor instead.
func (*UpdateSmsBatchResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{4}
}

type DeleteSmsBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchIDs []string `protobuf:"bytes,1,rep,name=batchIDs,proto3" json:"batchIDs,omitempty"`
}

func (x *DeleteSmsBatchRequest) Reset() {
	*x = DeleteSmsBatchRequest{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsBatchRequest) ProtoMessage() {}

func (x *DeleteSmsBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsBatchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSmsBatchRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSmsBatchRequest) GetBatchIDs() []string {
	if x != nil {
		return x.BatchIDs
	}
	return nil
}

type DeleteSmsBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSmsBatchResponse) Reset() {
	*x = DeleteSmsBatchResponse{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSmsBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSmsBatchResponse) ProtoMessage() {}

func (x *DeleteSmsBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSmsBatchResponse.ProtoReflect.Descriptor instead.
func (*DeleteSmsBatchResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{6}
}

type GetSmsBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: uri:"batchID"
	BatchID string `protobuf:"bytes,1,opt,name=batchID,proto3" json:"batchID,omitempty" uri:"batchID"`
}

func (x *GetSmsBatchRequest) Reset() {
	*x = GetSmsBatchRequest{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsBatchRequest) ProtoMessage() {}

func (x *GetSmsBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsBatchRequest.ProtoReflect.Descriptor instead.
func (*GetSmsBatchRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{7}
}

func (x *GetSmsBatchRequest) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

type GetSmsBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmsBatch *SmsBatch `protobuf:"bytes,1,opt,name=smsBatch,proto3" json:"smsBatch,omitempty"`
}

func (x *GetSmsBatchResponse) Reset() {
	*x = GetSmsBatchResponse{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsBatchResponse) ProtoMessage() {}

func (x *GetSmsBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsBatchResponse.ProtoReflect.Descriptor instead.
func (*GetSmsBatchResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{8}
}

func (x *GetSmsBatchResponse) GetSmsBatch() *SmsBatch {
	if x != nil {
		return x.SmsBatch
	}
	return nil
}

type ListSmsBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: form:"offset"
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty" form:"offset"`
	// @gotags: form:"limit"
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (x *ListSmsBatchRequest) Reset() {
	*x = ListSmsBatchRequest{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsBatchRequest) ProtoMessage() {}

func (x *ListSmsBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsBatchRequest.ProtoReflect.Descriptor instead.
func (*ListSmsBatchRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{9}
}

func (x *ListSmsBatchRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSmsBatchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListSmsBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	SmsBatches []*SmsBatch `protobuf:"bytes,2,rep,name=smsBatches,proto3" json:"smsBatches,omitempty"`
}

func (x *ListSmsBatchResponse) Reset() {
	*x = ListSmsBatchResponse{}
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmsBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmsBatchResponse) ProtoMessage() {}

func (x *ListSmsBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_sms_batch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmsBatchResponse.ProtoReflect.Descriptor instead.
func (*ListSmsBatchResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_sms_batch_proto_rawDescGZIP(), []int{10}
}

func (x *ListSmsBatchResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSmsBatchResponse) GetSmsBatches() []*SmsBatch {
	if x != nil {
		return x.SmsBatches
	}
	return nil
}

var File_nightwatch_v1_sms_batch_proto protoreflect.FileDescriptor

var file_nightwatch_v1_sms_batch_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfa, 0x06, 0x0a, 0x08, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4c, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x08, 0x73, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x22, 0x85,
	0x09, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x09, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0b, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x14, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x44, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x22,
	0x4a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x43, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x65, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x0a, 0x73, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x73, 0x6d, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65, 0x2f,
	0x64, 0x63, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nightwatch_v1_sms_batch_proto_rawDescOnce sync.Once
	file_nightwatch_v1_sms_batch_proto_rawDescData = file_nightwatch_v1_sms_batch_proto_rawDesc
)

func file_nightwatch_v1_sms_batch_proto_rawDescGZIP() []byte {
	file_nightwatch_v1_sms_batch_proto_rawDescOnce.Do(func() {
		file_nightwatch_v1_sms_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_nightwatch_v1_sms_batch_proto_rawDescData)
	})
	return file_nightwatch_v1_sms_batch_proto_rawDescData
}

var file_nightwatch_v1_sms_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_nightwatch_v1_sms_batch_proto_goTypes = []any{
	(*SmsBatch)(nil),               // 0: nightwatch.v1.SmsBatch
	(*CreateSmsBatchRequest)(nil),  // 1: nightwatch.v1.CreateSmsBatchRequest
	(*CreateSmsBatchResponse)(nil), // 2: nightwatch.v1.CreateSmsBatchResponse
	(*UpdateSmsBatchRequest)(nil),  // 3: nightwatch.v1.UpdateSmsBatchRequest
	(*UpdateSmsBatchResponse)(nil), // 4: nightwatch.v1.UpdateSmsBatchResponse
	(*DeleteSmsBatchRequest)(nil),  // 5: nightwatch.v1.DeleteSmsBatchRequest
	(*DeleteSmsBatchResponse)(nil), // 6: nightwatch.v1.DeleteSmsBatchResponse
	(*GetSmsBatchRequest)(nil),     // 7: nightwatch.v1.GetSmsBatchRequest
	(*GetSmsBatchResponse)(nil),    // 8: nightwatch.v1.GetSmsBatchResponse
	(*ListSmsBatchRequest)(nil),    // 9: nightwatch.v1.ListSmsBatchRequest
	(*ListSmsBatchResponse)(nil),   // 10: nightwatch.v1.ListSmsBatchResponse
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
}
var file_nightwatch_v1_sms_batch_proto_depIdxs = []int32{
	11, // 0: nightwatch.v1.SmsBatch.scheduleTime:type_name -> google.protobuf.Timestamp
	11, // 1: nightwatch.v1.SmsBatch.createdAt:type_name -> google.protobuf.Timestamp
	11, // 2: nightwatch.v1.SmsBatch.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 3: nightwatch.v1.CreateSmsBatchRequest.smsBatch:type_name -> nightwatch.v1.SmsBatch
	11, // 4: nightwatch.v1.UpdateSmsBatchRequest.scheduleTime:type_name -> google.protobuf.Timestamp
	0,  // 5: nightwatch.v1.GetSmsBatchResponse.smsBatch:type_name -> nightwatch.v1.SmsBatch
	0,  // 6: nightwatch.v1.ListSmsBatchResponse.smsBatches:type_name -> nightwatch.v1.SmsBatch
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_nightwatch_v1_sms_batch_proto_init() }
func file_nightwatch_v1_sms_batch_proto_init() {
	if File_nightwatch_v1_sms_batch_proto != nil {
		return
	}
	file_nightwatch_v1_sms_batch_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nightwatch_v1_sms_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nightwatch_v1_sms_batch_proto_goTypes,
		DependencyIndexes: file_nightwatch_v1_sms_batch_proto_depIdxs,
		MessageInfos:      file_nightwatch_v1_sms_batch_proto_msgTypes,
	}.Build()
	File_nightwatch_v1_sms_batch_proto = out.File
	file_nightwatch_v1_sms_batch_proto_rawDesc = nil
	file_nightwatch_v1_sms_batch_proto_goTypes = nil
	file_nightwatch_v1_sms_batch_proto_depIdxs = nil
}
