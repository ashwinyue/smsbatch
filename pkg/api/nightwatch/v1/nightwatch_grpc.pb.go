// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/miniblog. The professional
// version of this repository is https://github.com/onexstack/onex.

// Nightwatch API 定义，包含任务调度、作业管理和文章管理的 RPC 接口

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: nightwatch/v1/nightwatch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nightwatch_CreateCronJob_FullMethodName = "/nightwatch.v1.Nightwatch/CreateCronJob"
	Nightwatch_UpdateCronJob_FullMethodName = "/nightwatch.v1.Nightwatch/UpdateCronJob"
	Nightwatch_DeleteCronJob_FullMethodName = "/nightwatch.v1.Nightwatch/DeleteCronJob"
	Nightwatch_GetCronJob_FullMethodName    = "/nightwatch.v1.Nightwatch/GetCronJob"
	Nightwatch_ListCronJob_FullMethodName   = "/nightwatch.v1.Nightwatch/ListCronJob"
	Nightwatch_CreateJob_FullMethodName     = "/nightwatch.v1.Nightwatch/CreateJob"
	Nightwatch_UpdateJob_FullMethodName     = "/nightwatch.v1.Nightwatch/UpdateJob"
	Nightwatch_DeleteJob_FullMethodName     = "/nightwatch.v1.Nightwatch/DeleteJob"
	Nightwatch_GetJob_FullMethodName        = "/nightwatch.v1.Nightwatch/GetJob"
	Nightwatch_ListJob_FullMethodName       = "/nightwatch.v1.Nightwatch/ListJob"
	Nightwatch_CreatePost_FullMethodName    = "/nightwatch.v1.Nightwatch/CreatePost"
	Nightwatch_UpdatePost_FullMethodName    = "/nightwatch.v1.Nightwatch/UpdatePost"
	Nightwatch_DeletePost_FullMethodName    = "/nightwatch.v1.Nightwatch/DeletePost"
	Nightwatch_GetPost_FullMethodName       = "/nightwatch.v1.Nightwatch/GetPost"
	Nightwatch_ListPost_FullMethodName      = "/nightwatch.v1.Nightwatch/ListPost"
)

// NightwatchClient is the client API for Nightwatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Nightwatch 定义了一个 Nightwatch RPC 服务
type NightwatchClient interface {
	// CreateCronJob 创建定时任务
	CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobResponse, error)
	// UpdateCronJob 更新定时任务
	UpdateCronJob(ctx context.Context, in *UpdateCronJobRequest, opts ...grpc.CallOption) (*UpdateCronJobResponse, error)
	// DeleteCronJob 删除定时任务
	DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*DeleteCronJobResponse, error)
	// GetCronJob 获取定时任务信息
	GetCronJob(ctx context.Context, in *GetCronJobRequest, opts ...grpc.CallOption) (*GetCronJobResponse, error)
	// ListCronJob 列出所有定时任务
	ListCronJob(ctx context.Context, in *ListCronJobRequest, opts ...grpc.CallOption) (*ListCronJobResponse, error)
	// CreateJob 创建作业
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// UpdateJob 更新作业
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	// DeleteJob 删除作业
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	// GetJob 获取作业信息
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// ListJob 列出所有作业
	ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*ListJobResponse, error)
	// CreatePost 创建文章
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	// UpdatePost 更新文章
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	// DeletePost 删除文章
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	// GetPost 获取文章信息
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	// ListPost 列出所有文章
	ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error)
}

type nightwatchClient struct {
	cc grpc.ClientConnInterface
}

func NewNightwatchClient(cc grpc.ClientConnInterface) NightwatchClient {
	return &nightwatchClient{cc}
}

func (c *nightwatchClient) CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCronJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_CreateCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) UpdateCronJob(ctx context.Context, in *UpdateCronJobRequest, opts ...grpc.CallOption) (*UpdateCronJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCronJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_UpdateCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*DeleteCronJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCronJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_DeleteCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) GetCronJob(ctx context.Context, in *GetCronJobRequest, opts ...grpc.CallOption) (*GetCronJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCronJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_GetCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) ListCronJob(ctx context.Context, in *ListCronJobRequest, opts ...grpc.CallOption) (*ListCronJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCronJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_ListCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*ListJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobResponse)
	err := c.cc.Invoke(ctx, Nightwatch_ListJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, Nightwatch_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, Nightwatch_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, Nightwatch_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, Nightwatch_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nightwatchClient) ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostResponse)
	err := c.cc.Invoke(ctx, Nightwatch_ListPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NightwatchServer is the server API for Nightwatch service.
// All implementations must embed UnimplementedNightwatchServer
// for forward compatibility.
//
// Nightwatch 定义了一个 Nightwatch RPC 服务
type NightwatchServer interface {
	// CreateCronJob 创建定时任务
	CreateCronJob(context.Context, *CreateCronJobRequest) (*CreateCronJobResponse, error)
	// UpdateCronJob 更新定时任务
	UpdateCronJob(context.Context, *UpdateCronJobRequest) (*UpdateCronJobResponse, error)
	// DeleteCronJob 删除定时任务
	DeleteCronJob(context.Context, *DeleteCronJobRequest) (*DeleteCronJobResponse, error)
	// GetCronJob 获取定时任务信息
	GetCronJob(context.Context, *GetCronJobRequest) (*GetCronJobResponse, error)
	// ListCronJob 列出所有定时任务
	ListCronJob(context.Context, *ListCronJobRequest) (*ListCronJobResponse, error)
	// CreateJob 创建作业
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// UpdateJob 更新作业
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	// DeleteJob 删除作业
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	// GetJob 获取作业信息
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	// ListJob 列出所有作业
	ListJob(context.Context, *ListJobRequest) (*ListJobResponse, error)
	// CreatePost 创建文章
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// UpdatePost 更新文章
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	// DeletePost 删除文章
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	// GetPost 获取文章信息
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	// ListPost 列出所有文章
	ListPost(context.Context, *ListPostRequest) (*ListPostResponse, error)
	mustEmbedUnimplementedNightwatchServer()
}

// UnimplementedNightwatchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNightwatchServer struct{}

func (UnimplementedNightwatchServer) CreateCronJob(context.Context, *CreateCronJobRequest) (*CreateCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (UnimplementedNightwatchServer) UpdateCronJob(context.Context, *UpdateCronJobRequest) (*UpdateCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronJob not implemented")
}
func (UnimplementedNightwatchServer) DeleteCronJob(context.Context, *DeleteCronJobRequest) (*DeleteCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (UnimplementedNightwatchServer) GetCronJob(context.Context, *GetCronJobRequest) (*GetCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronJob not implemented")
}
func (UnimplementedNightwatchServer) ListCronJob(context.Context, *ListCronJobRequest) (*ListCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronJob not implemented")
}
func (UnimplementedNightwatchServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedNightwatchServer) UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedNightwatchServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedNightwatchServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedNightwatchServer) ListJob(context.Context, *ListJobRequest) (*ListJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedNightwatchServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedNightwatchServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedNightwatchServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedNightwatchServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedNightwatchServer) ListPost(context.Context, *ListPostRequest) (*ListPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedNightwatchServer) mustEmbedUnimplementedNightwatchServer() {}
func (UnimplementedNightwatchServer) testEmbeddedByValue()                    {}

// UnsafeNightwatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NightwatchServer will
// result in compilation errors.
type UnsafeNightwatchServer interface {
	mustEmbedUnimplementedNightwatchServer()
}

func RegisterNightwatchServer(s grpc.ServiceRegistrar, srv NightwatchServer) {
	// If the following call pancis, it indicates UnimplementedNightwatchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nightwatch_ServiceDesc, srv)
}

func _Nightwatch_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_CreateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).CreateCronJob(ctx, req.(*CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_UpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).UpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_UpdateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).UpdateCronJob(ctx, req.(*UpdateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_DeleteCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).DeleteCronJob(ctx, req.(*DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_GetCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).GetCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_GetCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).GetCronJob(ctx, req.(*GetCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_ListCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).ListCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_ListCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).ListCronJob(ctx, req.(*ListCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_ListJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).ListJob(ctx, req.(*ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nightwatch_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NightwatchServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nightwatch_ListPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NightwatchServer).ListPost(ctx, req.(*ListPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nightwatch_ServiceDesc is the grpc.ServiceDesc for Nightwatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nightwatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nightwatch.v1.Nightwatch",
	HandlerType: (*NightwatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronJob",
			Handler:    _Nightwatch_CreateCronJob_Handler,
		},
		{
			MethodName: "UpdateCronJob",
			Handler:    _Nightwatch_UpdateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _Nightwatch_DeleteCronJob_Handler,
		},
		{
			MethodName: "GetCronJob",
			Handler:    _Nightwatch_GetCronJob_Handler,
		},
		{
			MethodName: "ListCronJob",
			Handler:    _Nightwatch_ListCronJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Nightwatch_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Nightwatch_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Nightwatch_DeleteJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Nightwatch_GetJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _Nightwatch_ListJob_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Nightwatch_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Nightwatch_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Nightwatch_DeletePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Nightwatch_GetPost_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _Nightwatch_ListPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nightwatch/v1/nightwatch.proto",
}
