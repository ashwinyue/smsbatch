// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/miniblog. The professional
// version of this repository is https://github.com/onexstack/onex.

// Nightwatch API 定义，包含任务调度、作业管理和文章管理的 RPC 接口
syntax = "proto3"; // 告诉编译器此文件使用什么版本的语法

package nightwatch.v1;

// 提供用于定义 HTTP 映射的功能，比如通过 option (google.api.http) 实现 gRPC 到 HTTP 的映射
import "google/api/annotations.proto";
// 定义当前服务所依赖的定时任务消息
import "nightwatch/v1/cronjob.proto";
// 定义当前服务所依赖的作业消息
import "nightwatch/v1/job.proto";
// 定义当前服务所依赖的文章消息
import "nightwatch/v1/post.proto";
// 为生成 OpenAPI 文档提供相关注释（如标题、版本、作者、许可证等信息）
import "protoc-gen-openapiv2/options/annotations.proto";

// 指定协议缓冲区文件生成的 Go 代码所在的包路径
// 包路径为：github.com/ashwinyue/dcp/pkg/api/nightwatch/v1, 别名为：v1
option go_package = "github.com/ashwinyue/dcp/pkg/api/nightwatch/v1;v1";

// OpenAPI 全局配置，提供详细配置信息，用于生成 OpenAPI 文档
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        // API名称
        title: "nightwatch API";
        // API版本
        version: "1.0";
        // API 描述
        description: "Nightwatch 任务调度和作业管理系统";
        // 开发者的联系方式，包括项目名称、网址和电子邮件
        contact: {
            name: "Nightwatch 任务调度系统";
            url: "https://github.com/ashwinyue/dcp";
            email: "colin404@foxmail.com";
        };
        // 许可信息和链接（这里使用 MIT License）
        license: {
            name: "MIT License";
            url: "https://github.com/ashwinyue/dcp/blob/master/LICENSE";
        };
    };
    //  指定访问协议为 HTTPS
    schemes: HTTPS;
    // 定义了服务的请求和响应的数据格式为 application/json
    consumes: "application/json";
    produces: "application/json";
};

// Nightwatch 定义了一个 Nightwatch RPC 服务
service Nightwatch {
    // ========== CronJob 管理接口 ==========
    
    // CreateCronJob 创建定时任务
    rpc CreateCronJob(CreateCronJobRequest) returns (CreateCronJobResponse) {
        option (google.api.http) = {
            post: "/v1/cronjobs",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建定时任务";
            operation_id: "CreateCronJob";
            tags: "定时任务管理";
        };
    }

    // UpdateCronJob 更新定时任务
    rpc UpdateCronJob(UpdateCronJobRequest) returns (UpdateCronJobResponse) {
        option (google.api.http) = {
            put: "/v1/cronjobs/{cronJobID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新定时任务";
            operation_id: "UpdateCronJob";
            tags: "定时任务管理";
        };
    }

    // DeleteCronJob 删除定时任务
    rpc DeleteCronJob(DeleteCronJobRequest) returns (DeleteCronJobResponse) {
        option (google.api.http) = {
            delete: "/v1/cronjobs",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除定时任务";
            operation_id: "DeleteCronJob";
            tags: "定时任务管理";
        };
    }

    // GetCronJob 获取定时任务信息
    rpc GetCronJob(GetCronJobRequest) returns (GetCronJobResponse) {
        option (google.api.http) = {
            get: "/v1/cronjobs/{cronJobID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取定时任务信息";
            operation_id: "GetCronJob";
            tags: "定时任务管理";
        };
    }

    // ListCronJob 列出所有定时任务
    rpc ListCronJob(ListCronJobRequest) returns (ListCronJobResponse) {
        option (google.api.http) = {
            get: "/v1/cronjobs",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有定时任务";
            operation_id: "ListCronJob";
            tags: "定时任务管理";
        };
    }

    // ========== Job 管理接口 ==========
    
    // CreateJob 创建作业
    rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {
        option (google.api.http) = {
            post: "/v1/jobs",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建作业";
            operation_id: "CreateJob";
            tags: "作业管理";
        };
    }

    // UpdateJob 更新作业
    rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse) {
        option (google.api.http) = {
            put: "/v1/jobs/{jobID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新作业";
            operation_id: "UpdateJob";
            tags: "作业管理";
        };
    }

    // DeleteJob 删除作业
    rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse) {
        option (google.api.http) = {
            delete: "/v1/jobs",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除作业";
            operation_id: "DeleteJob";
            tags: "作业管理";
        };
    }

    // GetJob 获取作业信息
    rpc GetJob(GetJobRequest) returns (GetJobResponse) {
        option (google.api.http) = {
            get: "/v1/jobs/{jobID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取作业信息";
            operation_id: "GetJob";
            tags: "作业管理";
        };
    }

    // ListJob 列出所有作业
    rpc ListJob(ListJobRequest) returns (ListJobResponse) {
        option (google.api.http) = {
            get: "/v1/jobs",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有作业";
            operation_id: "ListJob";
            tags: "作业管理";
        };
    }

    // ========== Post 管理接口 ==========
    
    // CreatePost 创建文章
    rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
        option (google.api.http) = {
            post: "/v1/posts",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建文章";
            operation_id: "CreatePost";
            tags: "文章管理";
        };
    }

    // UpdatePost 更新文章
    rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse) {
        option (google.api.http) = {
            put: "/v1/posts/{postID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新文章";
            operation_id: "UpdatePost";
            tags: "文章管理";
        };
    }

    // DeletePost 删除文章
    rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
        option (google.api.http) = {
            delete: "/v1/posts",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除文章";
            operation_id: "DeletePost";
            tags: "文章管理";
        };
    }

    // GetPost 获取文章信息
    rpc GetPost(GetPostRequest) returns (GetPostResponse) {
        option (google.api.http) = {
            get: "/v1/posts/{postID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取文章信息";
            operation_id: "GetPost";
            tags: "文章管理";
        };
    }

    // ListPost 列出所有文章
    rpc ListPost(ListPostRequest) returns (ListPostResponse) {
        option (google.api.http) = {
            get: "/v1/posts",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有文章";
            operation_id: "ListPost";
            tags: "文章管理";
        };
    }
}