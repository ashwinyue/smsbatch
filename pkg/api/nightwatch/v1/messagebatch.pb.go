// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: nightwatch/v1/messagebatch.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageBatchJobStatus represents the status of a message batch job
type MessageBatchJobStatus int32

const (
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_UNSPECIFIED      MessageBatchJobStatus = 0
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_PENDING          MessageBatchJobStatus = 1
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_PROCESSING       MessageBatchJobStatus = 2
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_PARTIAL_COMPLETE MessageBatchJobStatus = 3
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_COMPLETE         MessageBatchJobStatus = 4
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_FAILED           MessageBatchJobStatus = 5
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_CANCELLED        MessageBatchJobStatus = 6
	MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_RETRYING         MessageBatchJobStatus = 7
)

// Enum value maps for MessageBatchJobStatus.
var (
	MessageBatchJobStatus_name = map[int32]string{
		0: "MESSAGE_BATCH_JOB_STATUS_UNSPECIFIED",
		1: "MESSAGE_BATCH_JOB_STATUS_PENDING",
		2: "MESSAGE_BATCH_JOB_STATUS_PROCESSING",
		3: "MESSAGE_BATCH_JOB_STATUS_PARTIAL_COMPLETE",
		4: "MESSAGE_BATCH_JOB_STATUS_COMPLETE",
		5: "MESSAGE_BATCH_JOB_STATUS_FAILED",
		6: "MESSAGE_BATCH_JOB_STATUS_CANCELLED",
		7: "MESSAGE_BATCH_JOB_STATUS_RETRYING",
	}
	MessageBatchJobStatus_value = map[string]int32{
		"MESSAGE_BATCH_JOB_STATUS_UNSPECIFIED":      0,
		"MESSAGE_BATCH_JOB_STATUS_PENDING":          1,
		"MESSAGE_BATCH_JOB_STATUS_PROCESSING":       2,
		"MESSAGE_BATCH_JOB_STATUS_PARTIAL_COMPLETE": 3,
		"MESSAGE_BATCH_JOB_STATUS_COMPLETE":         4,
		"MESSAGE_BATCH_JOB_STATUS_FAILED":           5,
		"MESSAGE_BATCH_JOB_STATUS_CANCELLED":        6,
		"MESSAGE_BATCH_JOB_STATUS_RETRYING":         7,
	}
)

func (x MessageBatchJobStatus) Enum() *MessageBatchJobStatus {
	p := new(MessageBatchJobStatus)
	*p = x
	return p
}

func (x MessageBatchJobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageBatchJobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_nightwatch_v1_messagebatch_proto_enumTypes[0].Descriptor()
}

func (MessageBatchJobStatus) Type() protoreflect.EnumType {
	return &file_nightwatch_v1_messagebatch_proto_enumTypes[0]
}

func (x MessageBatchJobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageBatchJobStatus.Descriptor instead.
func (MessageBatchJobStatus) EnumDescriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{0}
}

// MessageBatchJob represents a message batch processing job
type MessageBatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchID     string                      `protobuf:"bytes,2,opt,name=batchID,proto3" json:"batchID,omitempty"`
	UserID      string                      `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Name        string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status      MessageBatchJobStatus       `protobuf:"varint,6,opt,name=status,proto3,enum=nightwatch.v1.MessageBatchJobStatus" json:"status,omitempty"`
	Params      *MessageBatchJobParams      `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`
	Results     *MessageBatchJobResults     `protobuf:"bytes,8,opt,name=results,proto3" json:"results,omitempty"`
	Conditions  []*MessageBatchJobCondition `protobuf:"bytes,9,rep,name=conditions,proto3" json:"conditions,omitempty"`
	CreatedAt   *timestamppb.Timestamp      `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp      `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	StartedAt   *timestamppb.Timestamp      `protobuf:"bytes,12,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	CompletedAt *timestamppb.Timestamp      `protobuf:"bytes,13,opt,name=completedAt,proto3" json:"completedAt,omitempty"`
}

func (x *MessageBatchJob) Reset() {
	*x = MessageBatchJob{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatchJob) ProtoMessage() {}

func (x *MessageBatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatchJob.ProtoReflect.Descriptor instead.
func (*MessageBatchJob) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{0}
}

func (x *MessageBatchJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageBatchJob) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

func (x *MessageBatchJob) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MessageBatchJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageBatchJob) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessageBatchJob) GetStatus() MessageBatchJobStatus {
	if x != nil {
		return x.Status
	}
	return MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_UNSPECIFIED
}

func (x *MessageBatchJob) GetParams() *MessageBatchJobParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MessageBatchJob) GetResults() *MessageBatchJobResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MessageBatchJob) GetConditions() []*MessageBatchJobCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *MessageBatchJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MessageBatchJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MessageBatchJob) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *MessageBatchJob) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

// MessageBatchJobParams contains parameters for message batch processing
type MessageBatchJobParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize      int64    `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	PartitionCount int64    `protobuf:"varint,2,opt,name=partitionCount,proto3" json:"partitionCount,omitempty"`
	MaxRetries     int64    `protobuf:"varint,3,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	Timeout        int64    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	SourceType     string   `protobuf:"bytes,5,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	TargetType     string   `protobuf:"bytes,6,opt,name=targetType,proto3" json:"targetType,omitempty"`
	Recipients     []string `protobuf:"bytes,7,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Template       string   `protobuf:"bytes,8,opt,name=template,proto3" json:"template,omitempty"`
	MessageType    string   `protobuf:"bytes,9,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Concurrency    int64    `protobuf:"varint,10,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
}

func (x *MessageBatchJobParams) Reset() {
	*x = MessageBatchJobParams{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatchJobParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatchJobParams) ProtoMessage() {}

func (x *MessageBatchJobParams) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatchJobParams.ProtoReflect.Descriptor instead.
func (*MessageBatchJobParams) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{1}
}

func (x *MessageBatchJobParams) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *MessageBatchJobParams) GetPartitionCount() int64 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *MessageBatchJobParams) GetMaxRetries() int64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *MessageBatchJobParams) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *MessageBatchJobParams) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *MessageBatchJobParams) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *MessageBatchJobParams) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *MessageBatchJobParams) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *MessageBatchJobParams) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *MessageBatchJobParams) GetConcurrency() int64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

// MessageBatchJobResults contains the results of message batch processing
type MessageBatchJobResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchID           string                         `protobuf:"bytes,1,opt,name=batchID,proto3" json:"batchID,omitempty"`
	PreparationStats  *MessageBatchPhaseStats        `protobuf:"bytes,2,opt,name=preparationStats,proto3" json:"preparationStats,omitempty"`
	DeliveryStats     *MessageBatchPhaseStats        `protobuf:"bytes,3,opt,name=deliveryStats,proto3" json:"deliveryStats,omitempty"`
	TotalMessages     int64                          `protobuf:"varint,4,opt,name=totalMessages,proto3" json:"totalMessages,omitempty"`
	ProcessedMessages int64                          `protobuf:"varint,5,opt,name=processedMessages,proto3" json:"processedMessages,omitempty"`
	SuccessMessages   int64                          `protobuf:"varint,6,opt,name=successMessages,proto3" json:"successMessages,omitempty"`
	FailedMessages    int64                          `protobuf:"varint,7,opt,name=failedMessages,proto3" json:"failedMessages,omitempty"`
	ProgressPercent   float32                        `protobuf:"fixed32,8,opt,name=progressPercent,proto3" json:"progressPercent,omitempty"`
	CurrentPhase      string                         `protobuf:"bytes,9,opt,name=currentPhase,proto3" json:"currentPhase,omitempty"`
	CurrentState      string                         `protobuf:"bytes,10,opt,name=currentState,proto3" json:"currentState,omitempty"`
	PartitionStatuses []*MessageBatchPartitionStatus `protobuf:"bytes,11,rep,name=partitionStatuses,proto3" json:"partitionStatuses,omitempty"`
	ErrorMessage      string                         `protobuf:"bytes,12,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	RetryCount        int64                          `protobuf:"varint,13,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
}

func (x *MessageBatchJobResults) Reset() {
	*x = MessageBatchJobResults{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatchJobResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatchJobResults) ProtoMessage() {}

func (x *MessageBatchJobResults) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatchJobResults.ProtoReflect.Descriptor instead.
func (*MessageBatchJobResults) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{2}
}

func (x *MessageBatchJobResults) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

func (x *MessageBatchJobResults) GetPreparationStats() *MessageBatchPhaseStats {
	if x != nil {
		return x.PreparationStats
	}
	return nil
}

func (x *MessageBatchJobResults) GetDeliveryStats() *MessageBatchPhaseStats {
	if x != nil {
		return x.DeliveryStats
	}
	return nil
}

func (x *MessageBatchJobResults) GetTotalMessages() int64 {
	if x != nil {
		return x.TotalMessages
	}
	return 0
}

func (x *MessageBatchJobResults) GetProcessedMessages() int64 {
	if x != nil {
		return x.ProcessedMessages
	}
	return 0
}

func (x *MessageBatchJobResults) GetSuccessMessages() int64 {
	if x != nil {
		return x.SuccessMessages
	}
	return 0
}

func (x *MessageBatchJobResults) GetFailedMessages() int64 {
	if x != nil {
		return x.FailedMessages
	}
	return 0
}

func (x *MessageBatchJobResults) GetProgressPercent() float32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *MessageBatchJobResults) GetCurrentPhase() string {
	if x != nil {
		return x.CurrentPhase
	}
	return ""
}

func (x *MessageBatchJobResults) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *MessageBatchJobResults) GetPartitionStatuses() []*MessageBatchPartitionStatus {
	if x != nil {
		return x.PartitionStatuses
	}
	return nil
}

func (x *MessageBatchJobResults) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MessageBatchJobResults) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

// MessageBatchJobCondition represents a condition of the job
type MessageBatchJobCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status             string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message            string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	LastTransitionTime string `protobuf:"bytes,4,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,omitempty"`
}

func (x *MessageBatchJobCondition) Reset() {
	*x = MessageBatchJobCondition{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatchJobCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatchJobCondition) ProtoMessage() {}

func (x *MessageBatchJobCondition) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatchJobCondition.ProtoReflect.Descriptor instead.
func (*MessageBatchJobCondition) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{3}
}

func (x *MessageBatchJobCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageBatchJobCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MessageBatchJobCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageBatchJobCondition) GetLastTransitionTime() string {
	if x != nil {
		return x.LastTransitionTime
	}
	return ""
}

// Request and Response messages for CRUD operations
type CreateMessageBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *MessageBatchJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CreateMessageBatchJobRequest) Reset() {
	*x = CreateMessageBatchJobRequest{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMessageBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageBatchJobRequest) ProtoMessage() {}

func (x *CreateMessageBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageBatchJobRequest.ProtoReflect.Descriptor instead.
func (*CreateMessageBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMessageBatchJobRequest) GetJob() *MessageBatchJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type CreateMessageBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *CreateMessageBatchJobResponse) Reset() {
	*x = CreateMessageBatchJobResponse{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMessageBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageBatchJobResponse) ProtoMessage() {}

func (x *CreateMessageBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageBatchJobResponse.ProtoReflect.Descriptor instead.
func (*CreateMessageBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMessageBatchJobResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type UpdateMessageBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID       string                  `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Name        *string                 `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string                 `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Params      *MessageBatchJobParams  `protobuf:"bytes,4,opt,name=params,proto3,oneof" json:"params,omitempty"`
	Results     *MessageBatchJobResults `protobuf:"bytes,5,opt,name=results,proto3,oneof" json:"results,omitempty"`
	Status      *MessageBatchJobStatus  `protobuf:"varint,6,opt,name=status,proto3,enum=nightwatch.v1.MessageBatchJobStatus,oneof" json:"status,omitempty"`
}

func (x *UpdateMessageBatchJobRequest) Reset() {
	*x = UpdateMessageBatchJobRequest{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMessageBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageBatchJobRequest) ProtoMessage() {}

func (x *UpdateMessageBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageBatchJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateMessageBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMessageBatchJobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *UpdateMessageBatchJobRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateMessageBatchJobRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateMessageBatchJobRequest) GetParams() *MessageBatchJobParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateMessageBatchJobRequest) GetResults() *MessageBatchJobResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateMessageBatchJobRequest) GetStatus() MessageBatchJobStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return MessageBatchJobStatus_MESSAGE_BATCH_JOB_STATUS_UNSPECIFIED
}

type UpdateMessageBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMessageBatchJobResponse) Reset() {
	*x = UpdateMessageBatchJobResponse{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMessageBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageBatchJobResponse) ProtoMessage() {}

func (x *UpdateMessageBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageBatchJobResponse.ProtoReflect.Descriptor instead.
func (*UpdateMessageBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{7}
}

type DeleteMessageBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIDs []string `protobuf:"bytes,1,rep,name=jobIDs,proto3" json:"jobIDs,omitempty"`
}

func (x *DeleteMessageBatchJobRequest) Reset() {
	*x = DeleteMessageBatchJobRequest{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageBatchJobRequest) ProtoMessage() {}

func (x *DeleteMessageBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageBatchJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteMessageBatchJobRequest) GetJobIDs() []string {
	if x != nil {
		return x.JobIDs
	}
	return nil
}

type DeleteMessageBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMessageBatchJobResponse) Reset() {
	*x = DeleteMessageBatchJobResponse{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageBatchJobResponse) ProtoMessage() {}

func (x *DeleteMessageBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageBatchJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteMessageBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{9}
}

type GetMessageBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: uri:"jobID"
	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty" uri:"jobID"`
}

func (x *GetMessageBatchJobRequest) Reset() {
	*x = GetMessageBatchJobRequest{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessageBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageBatchJobRequest) ProtoMessage() {}

func (x *GetMessageBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageBatchJobRequest.ProtoReflect.Descriptor instead.
func (*GetMessageBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{10}
}

func (x *GetMessageBatchJobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type GetMessageBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *MessageBatchJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetMessageBatchJobResponse) Reset() {
	*x = GetMessageBatchJobResponse{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessageBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageBatchJobResponse) ProtoMessage() {}

func (x *GetMessageBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageBatchJobResponse.ProtoReflect.Descriptor instead.
func (*GetMessageBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{11}
}

func (x *GetMessageBatchJobResponse) GetJob() *MessageBatchJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListMessageBatchJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: form:"offset"
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty" form:"offset"`
	// @gotags: form:"limit"
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
}

func (x *ListMessageBatchJobRequest) Reset() {
	*x = ListMessageBatchJobRequest{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessageBatchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageBatchJobRequest) ProtoMessage() {}

func (x *ListMessageBatchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageBatchJobRequest.ProtoReflect.Descriptor instead.
func (*ListMessageBatchJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{12}
}

func (x *ListMessageBatchJobRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListMessageBatchJobRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListMessageBatchJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Jobs  []*MessageBatchJob `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListMessageBatchJobResponse) Reset() {
	*x = ListMessageBatchJobResponse{}
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessageBatchJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageBatchJobResponse) ProtoMessage() {}

func (x *ListMessageBatchJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_messagebatch_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageBatchJobResponse.ProtoReflect.Descriptor instead.
func (*ListMessageBatchJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_messagebatch_proto_rawDescGZIP(), []int{13}
}

func (x *ListMessageBatchJobResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMessageBatchJobResponse) GetJobs() []*MessageBatchJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

var File_nightwatch_v1_messagebatch_proto protoreflect.FileDescriptor

var file_nightwatch_v1_messagebatch_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x04, 0x0a, 0x0f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x15, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x88, 0x05, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x58, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90,
	0x01, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x22, 0x35, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0xfb, 0x02, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x03, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x4a, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x2a, 0xda, 0x02, 0x0a, 0x15, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65, 0x2f,
	0x64, 0x63, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nightwatch_v1_messagebatch_proto_rawDescOnce sync.Once
	file_nightwatch_v1_messagebatch_proto_rawDescData = file_nightwatch_v1_messagebatch_proto_rawDesc
)

func file_nightwatch_v1_messagebatch_proto_rawDescGZIP() []byte {
	file_nightwatch_v1_messagebatch_proto_rawDescOnce.Do(func() {
		file_nightwatch_v1_messagebatch_proto_rawDescData = protoimpl.X.CompressGZIP(file_nightwatch_v1_messagebatch_proto_rawDescData)
	})
	return file_nightwatch_v1_messagebatch_proto_rawDescData
}

var file_nightwatch_v1_messagebatch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nightwatch_v1_messagebatch_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_nightwatch_v1_messagebatch_proto_goTypes = []any{
	(MessageBatchJobStatus)(0),            // 0: nightwatch.v1.MessageBatchJobStatus
	(*MessageBatchJob)(nil),               // 1: nightwatch.v1.MessageBatchJob
	(*MessageBatchJobParams)(nil),         // 2: nightwatch.v1.MessageBatchJobParams
	(*MessageBatchJobResults)(nil),        // 3: nightwatch.v1.MessageBatchJobResults
	(*MessageBatchJobCondition)(nil),      // 4: nightwatch.v1.MessageBatchJobCondition
	(*CreateMessageBatchJobRequest)(nil),  // 5: nightwatch.v1.CreateMessageBatchJobRequest
	(*CreateMessageBatchJobResponse)(nil), // 6: nightwatch.v1.CreateMessageBatchJobResponse
	(*UpdateMessageBatchJobRequest)(nil),  // 7: nightwatch.v1.UpdateMessageBatchJobRequest
	(*UpdateMessageBatchJobResponse)(nil), // 8: nightwatch.v1.UpdateMessageBatchJobResponse
	(*DeleteMessageBatchJobRequest)(nil),  // 9: nightwatch.v1.DeleteMessageBatchJobRequest
	(*DeleteMessageBatchJobResponse)(nil), // 10: nightwatch.v1.DeleteMessageBatchJobResponse
	(*GetMessageBatchJobRequest)(nil),     // 11: nightwatch.v1.GetMessageBatchJobRequest
	(*GetMessageBatchJobResponse)(nil),    // 12: nightwatch.v1.GetMessageBatchJobResponse
	(*ListMessageBatchJobRequest)(nil),    // 13: nightwatch.v1.ListMessageBatchJobRequest
	(*ListMessageBatchJobResponse)(nil),   // 14: nightwatch.v1.ListMessageBatchJobResponse
	(*timestamppb.Timestamp)(nil),         // 15: google.protobuf.Timestamp
	(*MessageBatchPhaseStats)(nil),        // 16: nightwatch.v1.MessageBatchPhaseStats
	(*MessageBatchPartitionStatus)(nil),   // 17: nightwatch.v1.MessageBatchPartitionStatus
}
var file_nightwatch_v1_messagebatch_proto_depIdxs = []int32{
	0,  // 0: nightwatch.v1.MessageBatchJob.status:type_name -> nightwatch.v1.MessageBatchJobStatus
	2,  // 1: nightwatch.v1.MessageBatchJob.params:type_name -> nightwatch.v1.MessageBatchJobParams
	3,  // 2: nightwatch.v1.MessageBatchJob.results:type_name -> nightwatch.v1.MessageBatchJobResults
	4,  // 3: nightwatch.v1.MessageBatchJob.conditions:type_name -> nightwatch.v1.MessageBatchJobCondition
	15, // 4: nightwatch.v1.MessageBatchJob.createdAt:type_name -> google.protobuf.Timestamp
	15, // 5: nightwatch.v1.MessageBatchJob.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 6: nightwatch.v1.MessageBatchJob.startedAt:type_name -> google.protobuf.Timestamp
	15, // 7: nightwatch.v1.MessageBatchJob.completedAt:type_name -> google.protobuf.Timestamp
	16, // 8: nightwatch.v1.MessageBatchJobResults.preparationStats:type_name -> nightwatch.v1.MessageBatchPhaseStats
	16, // 9: nightwatch.v1.MessageBatchJobResults.deliveryStats:type_name -> nightwatch.v1.MessageBatchPhaseStats
	17, // 10: nightwatch.v1.MessageBatchJobResults.partitionStatuses:type_name -> nightwatch.v1.MessageBatchPartitionStatus
	1,  // 11: nightwatch.v1.CreateMessageBatchJobRequest.job:type_name -> nightwatch.v1.MessageBatchJob
	2,  // 12: nightwatch.v1.UpdateMessageBatchJobRequest.params:type_name -> nightwatch.v1.MessageBatchJobParams
	3,  // 13: nightwatch.v1.UpdateMessageBatchJobRequest.results:type_name -> nightwatch.v1.MessageBatchJobResults
	0,  // 14: nightwatch.v1.UpdateMessageBatchJobRequest.status:type_name -> nightwatch.v1.MessageBatchJobStatus
	1,  // 15: nightwatch.v1.GetMessageBatchJobResponse.job:type_name -> nightwatch.v1.MessageBatchJob
	1,  // 16: nightwatch.v1.ListMessageBatchJobResponse.jobs:type_name -> nightwatch.v1.MessageBatchJob
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nightwatch_v1_messagebatch_proto_init() }
func file_nightwatch_v1_messagebatch_proto_init() {
	if File_nightwatch_v1_messagebatch_proto != nil {
		return
	}
	file_nightwatch_v1_job_proto_init()
	file_nightwatch_v1_messagebatch_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nightwatch_v1_messagebatch_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nightwatch_v1_messagebatch_proto_goTypes,
		DependencyIndexes: file_nightwatch_v1_messagebatch_proto_depIdxs,
		EnumInfos:         file_nightwatch_v1_messagebatch_proto_enumTypes,
		MessageInfos:      file_nightwatch_v1_messagebatch_proto_msgTypes,
	}.Build()
	File_nightwatch_v1_messagebatch_proto = out.File
	file_nightwatch_v1_messagebatch_proto_rawDesc = nil
	file_nightwatch_v1_messagebatch_proto_goTypes = nil
	file_nightwatch_v1_messagebatch_proto_depIdxs = nil
}
