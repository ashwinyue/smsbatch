// Copyright 2024 孔令飞 <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/miniblog. The professional
// version of this repository is https://github.com/onexstack/onex.

// StatusTracking API 定义，包含状态跟踪的请求和响应消息

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: nightwatch/v1/statustracking.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UpdateJobStatusRequest 更新任务状态请求
type UpdateJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// 新状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 可选的条件信息
	Condition *JobCondition `protobuf:"bytes,3,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	// 更新时间戳
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UpdateJobStatusRequest) Reset() {
	*x = UpdateJobStatusRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobStatusRequest) ProtoMessage() {}

func (x *UpdateJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateJobStatusRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateJobStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateJobStatusRequest) GetCondition() *JobCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *UpdateJobStatusRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// UpdateJobStatusResponse 更新任务状态响应
type UpdateJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 响应消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateJobStatusResponse) Reset() {
	*x = UpdateJobStatusResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobStatusResponse) ProtoMessage() {}

func (x *UpdateJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateJobStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateJobStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GetJobStatusRequest 获取任务状态请求
type GetJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (x *GetJobStatusRequest) Reset() {
	*x = GetJobStatusRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusRequest) ProtoMessage() {}

func (x *GetJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusRequest.ProtoReflect.Descriptor instead.
func (*GetJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobStatusRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// GetJobStatusResponse 获取任务状态响应
type GetJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// 当前状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 最后更新时间
	UpdatedAt int64 `protobuf:"varint,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// 开始时间
	StartedAt int64 `protobuf:"varint,4,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// 结束时间
	EndedAt int64 `protobuf:"varint,5,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	// 运行时间（秒）
	RuntimeSeconds int64 `protobuf:"varint,6,opt,name=runtimeSeconds,proto3" json:"runtimeSeconds,omitempty"`
	// 是否来自缓存
	FromCache bool `protobuf:"varint,7,opt,name=fromCache,proto3" json:"fromCache,omitempty"`
}

func (x *GetJobStatusResponse) Reset() {
	*x = GetJobStatusResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusResponse) ProtoMessage() {}

func (x *GetJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusResponse.ProtoReflect.Descriptor instead.
func (*GetJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{3}
}

func (x *GetJobStatusResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetJobStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetJobStatusResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GetJobStatusResponse) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *GetJobStatusResponse) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *GetJobStatusResponse) GetRuntimeSeconds() int64 {
	if x != nil {
		return x.RuntimeSeconds
	}
	return 0
}

func (x *GetJobStatusResponse) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

// TrackRunningJobsRequest 跟踪运行中任务请求
type TrackRunningJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选的作用域过滤
	Scope *string `protobuf:"bytes,1,opt,name=scope,proto3,oneof" json:"scope,omitempty"`
	// 可选的监控器过滤
	Watcher *string `protobuf:"bytes,2,opt,name=watcher,proto3,oneof" json:"watcher,omitempty"`
}

func (x *TrackRunningJobsRequest) Reset() {
	*x = TrackRunningJobsRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackRunningJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRunningJobsRequest) ProtoMessage() {}

func (x *TrackRunningJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRunningJobsRequest.ProtoReflect.Descriptor instead.
func (*TrackRunningJobsRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{4}
}

func (x *TrackRunningJobsRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *TrackRunningJobsRequest) GetWatcher() string {
	if x != nil && x.Watcher != nil {
		return *x.Watcher
	}
	return ""
}

// RunningJobInfo 运行中任务信息
type RunningJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// 当前状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 开始时间
	StartedAt int64 `protobuf:"varint,3,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// 运行时间（秒）
	RuntimeSeconds int64 `protobuf:"varint,4,opt,name=runtimeSeconds,proto3" json:"runtimeSeconds,omitempty"`
	// 是否健康
	IsHealthy bool `protobuf:"varint,5,opt,name=isHealthy,proto3" json:"isHealthy,omitempty"`
	// 监控器名称
	Watcher string `protobuf:"bytes,6,opt,name=watcher,proto3" json:"watcher,omitempty"`
	// 作用域
	Scope string `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *RunningJobInfo) Reset() {
	*x = RunningJobInfo{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunningJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningJobInfo) ProtoMessage() {}

func (x *RunningJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningJobInfo.ProtoReflect.Descriptor instead.
func (*RunningJobInfo) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{5}
}

func (x *RunningJobInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *RunningJobInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RunningJobInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RunningJobInfo) GetRuntimeSeconds() int64 {
	if x != nil {
		return x.RuntimeSeconds
	}
	return 0
}

func (x *RunningJobInfo) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *RunningJobInfo) GetWatcher() string {
	if x != nil {
		return x.Watcher
	}
	return ""
}

func (x *RunningJobInfo) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// TrackRunningJobsResponse 跟踪运行中任务响应
type TrackRunningJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数量
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	// 运行中任务列表
	RunningJobs []*RunningJobInfo `protobuf:"bytes,2,rep,name=runningJobs,proto3" json:"runningJobs,omitempty"`
	// 跟踪时间
	TrackTime int64 `protobuf:"varint,3,opt,name=trackTime,proto3" json:"trackTime,omitempty"`
}

func (x *TrackRunningJobsResponse) Reset() {
	*x = TrackRunningJobsResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackRunningJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRunningJobsResponse) ProtoMessage() {}

func (x *TrackRunningJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRunningJobsResponse.ProtoReflect.Descriptor instead.
func (*TrackRunningJobsResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{6}
}

func (x *TrackRunningJobsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TrackRunningJobsResponse) GetRunningJobs() []*RunningJobInfo {
	if x != nil {
		return x.RunningJobs
	}
	return nil
}

func (x *TrackRunningJobsResponse) GetTrackTime() int64 {
	if x != nil {
		return x.TrackTime
	}
	return 0
}

// GetJobStatisticsRequest 获取任务统计请求
type GetJobStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 开始时间（可选）
	StartTime *int64 `protobuf:"varint,1,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	// 结束时间（可选）
	EndTime *int64 `protobuf:"varint,2,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	// 作用域过滤（可选）
	Scope *string `protobuf:"bytes,3,opt,name=scope,proto3,oneof" json:"scope,omitempty"`
	// 监控器过滤（可选）
	Watcher *string `protobuf:"bytes,4,opt,name=watcher,proto3,oneof" json:"watcher,omitempty"`
}

func (x *GetJobStatisticsRequest) Reset() {
	*x = GetJobStatisticsRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatisticsRequest) ProtoMessage() {}

func (x *GetJobStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetJobStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{7}
}

func (x *GetJobStatisticsRequest) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetJobStatisticsRequest) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *GetJobStatisticsRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *GetJobStatisticsRequest) GetWatcher() string {
	if x != nil && x.Watcher != nil {
		return *x.Watcher
	}
	return ""
}

// GetJobStatisticsResponse 获取任务统计响应
type GetJobStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总任务数
	TotalJobs int64 `protobuf:"varint,1,opt,name=totalJobs,proto3" json:"totalJobs,omitempty"`
	// 待处理任务数
	PendingJobs int64 `protobuf:"varint,2,opt,name=pendingJobs,proto3" json:"pendingJobs,omitempty"`
	// 运行中任务数
	RunningJobs int64 `protobuf:"varint,3,opt,name=runningJobs,proto3" json:"runningJobs,omitempty"`
	// 成功完成任务数
	SucceededJobs int64 `protobuf:"varint,4,opt,name=succeededJobs,proto3" json:"succeededJobs,omitempty"`
	// 失败任务数
	FailedJobs int64 `protobuf:"varint,5,opt,name=failedJobs,proto3" json:"failedJobs,omitempty"`
	// 平均运行时间（秒）
	AvgRuntimeSeconds int64 `protobuf:"varint,6,opt,name=avgRuntimeSeconds,proto3" json:"avgRuntimeSeconds,omitempty"`
	// 成功率（百分比）
	SuccessRate float64 `protobuf:"fixed64,7,opt,name=successRate,proto3" json:"successRate,omitempty"`
	// 生成时间
	GeneratedAt int64 `protobuf:"varint,8,opt,name=generatedAt,proto3" json:"generatedAt,omitempty"`
}

func (x *GetJobStatisticsResponse) Reset() {
	*x = GetJobStatisticsResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatisticsResponse) ProtoMessage() {}

func (x *GetJobStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetJobStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{8}
}

func (x *GetJobStatisticsResponse) GetTotalJobs() int64 {
	if x != nil {
		return x.TotalJobs
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetPendingJobs() int64 {
	if x != nil {
		return x.PendingJobs
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetRunningJobs() int64 {
	if x != nil {
		return x.RunningJobs
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetSucceededJobs() int64 {
	if x != nil {
		return x.SucceededJobs
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetFailedJobs() int64 {
	if x != nil {
		return x.FailedJobs
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetAvgRuntimeSeconds() int64 {
	if x != nil {
		return x.AvgRuntimeSeconds
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *GetJobStatisticsResponse) GetGeneratedAt() int64 {
	if x != nil {
		return x.GeneratedAt
	}
	return 0
}

// GetBatchStatisticsRequest 获取批处理统计请求
type GetBatchStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批处理ID（可选，为空则获取所有）
	BatchId *string `protobuf:"bytes,1,opt,name=batchId,proto3,oneof" json:"batchId,omitempty"`
	// 开始时间（可选）
	StartTime *int64 `protobuf:"varint,2,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	// 结束时间（可选）
	EndTime *int64 `protobuf:"varint,3,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
}

func (x *GetBatchStatisticsRequest) Reset() {
	*x = GetBatchStatisticsRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatchStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchStatisticsRequest) ProtoMessage() {}

func (x *GetBatchStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetBatchStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{9}
}

func (x *GetBatchStatisticsRequest) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *GetBatchStatisticsRequest) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetBatchStatisticsRequest) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

// BatchStatusInfo 批处理状态信息
type BatchStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批处理ID
	BatchId string `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	// 状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 总消息数
	TotalMessages int64 `protobuf:"varint,3,opt,name=totalMessages,proto3" json:"totalMessages,omitempty"`
	// 已处理消息数
	ProcessedMessages int64 `protobuf:"varint,4,opt,name=processedMessages,proto3" json:"processedMessages,omitempty"`
	// 失败消息数
	FailedMessages int64 `protobuf:"varint,5,opt,name=failedMessages,proto3" json:"failedMessages,omitempty"`
	// 成功消息数
	SuccessMessages int64 `protobuf:"varint,6,opt,name=successMessages,proto3" json:"successMessages,omitempty"`
	// 处理进度（百分比）
	Progress float32 `protobuf:"fixed32,7,opt,name=progress,proto3" json:"progress,omitempty"`
	// 开始时间
	StartedAt int64 `protobuf:"varint,8,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *BatchStatusInfo) Reset() {
	*x = BatchStatusInfo{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStatusInfo) ProtoMessage() {}

func (x *BatchStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStatusInfo.ProtoReflect.Descriptor instead.
func (*BatchStatusInfo) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{10}
}

func (x *BatchStatusInfo) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchStatusInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BatchStatusInfo) GetTotalMessages() int64 {
	if x != nil {
		return x.TotalMessages
	}
	return 0
}

func (x *BatchStatusInfo) GetProcessedMessages() int64 {
	if x != nil {
		return x.ProcessedMessages
	}
	return 0
}

func (x *BatchStatusInfo) GetFailedMessages() int64 {
	if x != nil {
		return x.FailedMessages
	}
	return 0
}

func (x *BatchStatusInfo) GetSuccessMessages() int64 {
	if x != nil {
		return x.SuccessMessages
	}
	return 0
}

func (x *BatchStatusInfo) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *BatchStatusInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *BatchStatusInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// GetBatchStatisticsResponse 获取批处理统计响应
type GetBatchStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批处理状态列表
	BatchStats []*BatchStatusInfo `protobuf:"bytes,1,rep,name=batchStats,proto3" json:"batchStats,omitempty"`
	// 总批处理数量
	TotalBatches int64 `protobuf:"varint,2,opt,name=totalBatches,proto3" json:"totalBatches,omitempty"`
	// 生成时间
	GeneratedAt int64 `protobuf:"varint,3,opt,name=generatedAt,proto3" json:"generatedAt,omitempty"`
}

func (x *GetBatchStatisticsResponse) Reset() {
	*x = GetBatchStatisticsResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatchStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchStatisticsResponse) ProtoMessage() {}

func (x *GetBatchStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetBatchStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{11}
}

func (x *GetBatchStatisticsResponse) GetBatchStats() []*BatchStatusInfo {
	if x != nil {
		return x.BatchStats
	}
	return nil
}

func (x *GetBatchStatisticsResponse) GetTotalBatches() int64 {
	if x != nil {
		return x.TotalBatches
	}
	return 0
}

func (x *GetBatchStatisticsResponse) GetGeneratedAt() int64 {
	if x != nil {
		return x.GeneratedAt
	}
	return 0
}

// JobHealthCheckRequest 任务健康检查请求
type JobHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (x *JobHealthCheckRequest) Reset() {
	*x = JobHealthCheckRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHealthCheckRequest) ProtoMessage() {}

func (x *JobHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*JobHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{12}
}

func (x *JobHealthCheckRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// JobHealthStatus 任务健康状态
type JobHealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// 当前状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 最后心跳时间
	LastHeartbeat int64 `protobuf:"varint,3,opt,name=lastHeartbeat,proto3" json:"lastHeartbeat,omitempty"`
	// 是否健康
	IsHealthy bool `protobuf:"varint,4,opt,name=isHealthy,proto3" json:"isHealthy,omitempty"`
	// 错误计数
	ErrorCount int64 `protobuf:"varint,5,opt,name=errorCount,proto3" json:"errorCount,omitempty"`
	// 重试计数
	RetryCount int64 `protobuf:"varint,6,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	// 处理时间（毫秒）
	ProcessingTimeMs int64 `protobuf:"varint,7,opt,name=processingTimeMs,proto3" json:"processingTimeMs,omitempty"`
	// 健康指标
	Metrics map[string]string `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobHealthStatus) Reset() {
	*x = JobHealthStatus{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHealthStatus) ProtoMessage() {}

func (x *JobHealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHealthStatus.ProtoReflect.Descriptor instead.
func (*JobHealthStatus) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{13}
}

func (x *JobHealthStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobHealthStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobHealthStatus) GetLastHeartbeat() int64 {
	if x != nil {
		return x.LastHeartbeat
	}
	return 0
}

func (x *JobHealthStatus) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *JobHealthStatus) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *JobHealthStatus) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *JobHealthStatus) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *JobHealthStatus) GetMetrics() map[string]string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// JobHealthCheckResponse 任务健康检查响应
type JobHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 健康状态
	HealthStatus *JobHealthStatus `protobuf:"bytes,1,opt,name=healthStatus,proto3" json:"healthStatus,omitempty"`
}

func (x *JobHealthCheckResponse) Reset() {
	*x = JobHealthCheckResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHealthCheckResponse) ProtoMessage() {}

func (x *JobHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*JobHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{14}
}

func (x *JobHealthCheckResponse) GetHealthStatus() *JobHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

// GetSystemMetricsRequest 获取系统指标请求
type GetSystemMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemMetricsRequest) Reset() {
	*x = GetSystemMetricsRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemMetricsRequest) ProtoMessage() {}

func (x *GetSystemMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetSystemMetricsRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{15}
}

// SystemMetrics 系统监控指标
type SystemMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间戳
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 活跃任务数
	ActiveJobs int64 `protobuf:"varint,2,opt,name=activeJobs,proto3" json:"activeJobs,omitempty"`
	// 完成任务数
	CompletedJobs int64 `protobuf:"varint,3,opt,name=completedJobs,proto3" json:"completedJobs,omitempty"`
	// 失败任务数
	FailedJobs int64 `protobuf:"varint,4,opt,name=failedJobs,proto3" json:"failedJobs,omitempty"`
	// 待处理任务数
	PendingJobs int64 `protobuf:"varint,5,opt,name=pendingJobs,proto3" json:"pendingJobs,omitempty"`
	// 平均运行时间（毫秒）
	AverageRuntimeMs int64 `protobuf:"varint,6,opt,name=averageRuntimeMs,proto3" json:"averageRuntimeMs,omitempty"`
	// 成功率（百分比）
	SuccessRate float64 `protobuf:"fixed64,7,opt,name=successRate,proto3" json:"successRate,omitempty"`
	// 每分钟吞吐量
	ThroughputPerMin int64 `protobuf:"varint,8,opt,name=throughputPerMin,proto3" json:"throughputPerMin,omitempty"`
	// 资源使用情况
	ResourceUsage map[string]string `protobuf:"bytes,9,rep,name=resourceUsage,proto3" json:"resourceUsage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SystemMetrics) Reset() {
	*x = SystemMetrics{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMetrics) ProtoMessage() {}

func (x *SystemMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMetrics.ProtoReflect.Descriptor instead.
func (*SystemMetrics) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{16}
}

func (x *SystemMetrics) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SystemMetrics) GetActiveJobs() int64 {
	if x != nil {
		return x.ActiveJobs
	}
	return 0
}

func (x *SystemMetrics) GetCompletedJobs() int64 {
	if x != nil {
		return x.CompletedJobs
	}
	return 0
}

func (x *SystemMetrics) GetFailedJobs() int64 {
	if x != nil {
		return x.FailedJobs
	}
	return 0
}

func (x *SystemMetrics) GetPendingJobs() int64 {
	if x != nil {
		return x.PendingJobs
	}
	return 0
}

func (x *SystemMetrics) GetAverageRuntimeMs() int64 {
	if x != nil {
		return x.AverageRuntimeMs
	}
	return 0
}

func (x *SystemMetrics) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *SystemMetrics) GetThroughputPerMin() int64 {
	if x != nil {
		return x.ThroughputPerMin
	}
	return 0
}

func (x *SystemMetrics) GetResourceUsage() map[string]string {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

// GetSystemMetricsResponse 获取系统指标响应
type GetSystemMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统指标
	SystemMetrics *SystemMetrics `protobuf:"bytes,1,opt,name=systemMetrics,proto3" json:"systemMetrics,omitempty"`
}

func (x *GetSystemMetricsResponse) Reset() {
	*x = GetSystemMetricsResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemMetricsResponse) ProtoMessage() {}

func (x *GetSystemMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetSystemMetricsResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{17}
}

func (x *GetSystemMetricsResponse) GetSystemMetrics() *SystemMetrics {
	if x != nil {
		return x.SystemMetrics
	}
	return nil
}

// CleanupExpiredStatusRequest 清理过期状态请求
type CleanupExpiredStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 保留时间（小时）
	RetentionHours int64 `protobuf:"varint,1,opt,name=retentionHours,proto3" json:"retentionHours,omitempty"`
}

func (x *CleanupExpiredStatusRequest) Reset() {
	*x = CleanupExpiredStatusRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupExpiredStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupExpiredStatusRequest) ProtoMessage() {}

func (x *CleanupExpiredStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupExpiredStatusRequest.ProtoReflect.Descriptor instead.
func (*CleanupExpiredStatusRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{18}
}

func (x *CleanupExpiredStatusRequest) GetRetentionHours() int64 {
	if x != nil {
		return x.RetentionHours
	}
	return 0
}

// CleanupExpiredStatusResponse 清理过期状态响应
type CleanupExpiredStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清理的记录数
	CleanedCount int64 `protobuf:"varint,1,opt,name=cleanedCount,proto3" json:"cleanedCount,omitempty"`
	// 成功标志
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// 消息
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CleanupExpiredStatusResponse) Reset() {
	*x = CleanupExpiredStatusResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupExpiredStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupExpiredStatusResponse) ProtoMessage() {}

func (x *CleanupExpiredStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupExpiredStatusResponse.ProtoReflect.Descriptor instead.
func (*CleanupExpiredStatusResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{19}
}

func (x *CleanupExpiredStatusResponse) GetCleanedCount() int64 {
	if x != nil {
		return x.CleanedCount
	}
	return 0
}

func (x *CleanupExpiredStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CleanupExpiredStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StartStatusWatcherRequest 启动状态监控器请求
type StartStatusWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 监控间隔（秒）
	IntervalSeconds *int32 `protobuf:"varint,1,opt,name=intervalSeconds,proto3,oneof" json:"intervalSeconds,omitempty"`
}

func (x *StartStatusWatcherRequest) Reset() {
	*x = StartStatusWatcherRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStatusWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStatusWatcherRequest) ProtoMessage() {}

func (x *StartStatusWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStatusWatcherRequest.ProtoReflect.Descriptor instead.
func (*StartStatusWatcherRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{20}
}

func (x *StartStatusWatcherRequest) GetIntervalSeconds() int32 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return 0
}

// StartStatusWatcherResponse 启动状态监控器响应
type StartStatusWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 成功标志
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartStatusWatcherResponse) Reset() {
	*x = StartStatusWatcherResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStatusWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStatusWatcherResponse) ProtoMessage() {}

func (x *StartStatusWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStatusWatcherResponse.ProtoReflect.Descriptor instead.
func (*StartStatusWatcherResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{21}
}

func (x *StartStatusWatcherResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartStatusWatcherResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StopStatusWatcherRequest 停止状态监控器请求
type StopStatusWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopStatusWatcherRequest) Reset() {
	*x = StopStatusWatcherRequest{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStatusWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStatusWatcherRequest) ProtoMessage() {}

func (x *StopStatusWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStatusWatcherRequest.ProtoReflect.Descriptor instead.
func (*StopStatusWatcherRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{22}
}

// StopStatusWatcherResponse 停止状态监控器响应
type StopStatusWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 成功标志
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopStatusWatcherResponse) Reset() {
	*x = StopStatusWatcherResponse{}
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStatusWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStatusWatcherResponse) ProtoMessage() {}

func (x *StopStatusWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_statustracking_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStatusWatcherResponse.ProtoReflect.Descriptor instead.
func (*StopStatusWatcherResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_statustracking_proto_rawDescGZIP(), []int{23}
}

func (x *StopStatusWatcherResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StopStatusWatcherResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_nightwatch_v1_statustracking_proto protoreflect.FileDescriptor

var file_nightwatch_v1_statustracking_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xe0,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x22, 0x69, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0xd2, 0x01, 0x0a,
	0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0xb4, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76,
	0x67, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x76, 0x67, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc1, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d, 0x0a, 0x15, 0x4a, 0x6f,
	0x62, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x0f, 0x4a, 0x6f,
	0x62, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c,
	0x0a, 0x16, 0x4a, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0x45, 0x0a, 0x1b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x76, 0x0a, 0x1c, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x50, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4f, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x73, 0x68, 0x77, 0x69, 0x6e, 0x79, 0x75, 0x65, 0x2f, 0x64, 0x63, 0x70, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nightwatch_v1_statustracking_proto_rawDescOnce sync.Once
	file_nightwatch_v1_statustracking_proto_rawDescData = file_nightwatch_v1_statustracking_proto_rawDesc
)

func file_nightwatch_v1_statustracking_proto_rawDescGZIP() []byte {
	file_nightwatch_v1_statustracking_proto_rawDescOnce.Do(func() {
		file_nightwatch_v1_statustracking_proto_rawDescData = protoimpl.X.CompressGZIP(file_nightwatch_v1_statustracking_proto_rawDescData)
	})
	return file_nightwatch_v1_statustracking_proto_rawDescData
}

var file_nightwatch_v1_statustracking_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_nightwatch_v1_statustracking_proto_goTypes = []any{
	(*UpdateJobStatusRequest)(nil),       // 0: nightwatch.v1.UpdateJobStatusRequest
	(*UpdateJobStatusResponse)(nil),      // 1: nightwatch.v1.UpdateJobStatusResponse
	(*GetJobStatusRequest)(nil),          // 2: nightwatch.v1.GetJobStatusRequest
	(*GetJobStatusResponse)(nil),         // 3: nightwatch.v1.GetJobStatusResponse
	(*TrackRunningJobsRequest)(nil),      // 4: nightwatch.v1.TrackRunningJobsRequest
	(*RunningJobInfo)(nil),               // 5: nightwatch.v1.RunningJobInfo
	(*TrackRunningJobsResponse)(nil),     // 6: nightwatch.v1.TrackRunningJobsResponse
	(*GetJobStatisticsRequest)(nil),      // 7: nightwatch.v1.GetJobStatisticsRequest
	(*GetJobStatisticsResponse)(nil),     // 8: nightwatch.v1.GetJobStatisticsResponse
	(*GetBatchStatisticsRequest)(nil),    // 9: nightwatch.v1.GetBatchStatisticsRequest
	(*BatchStatusInfo)(nil),              // 10: nightwatch.v1.BatchStatusInfo
	(*GetBatchStatisticsResponse)(nil),   // 11: nightwatch.v1.GetBatchStatisticsResponse
	(*JobHealthCheckRequest)(nil),        // 12: nightwatch.v1.JobHealthCheckRequest
	(*JobHealthStatus)(nil),              // 13: nightwatch.v1.JobHealthStatus
	(*JobHealthCheckResponse)(nil),       // 14: nightwatch.v1.JobHealthCheckResponse
	(*GetSystemMetricsRequest)(nil),      // 15: nightwatch.v1.GetSystemMetricsRequest
	(*SystemMetrics)(nil),                // 16: nightwatch.v1.SystemMetrics
	(*GetSystemMetricsResponse)(nil),     // 17: nightwatch.v1.GetSystemMetricsResponse
	(*CleanupExpiredStatusRequest)(nil),  // 18: nightwatch.v1.CleanupExpiredStatusRequest
	(*CleanupExpiredStatusResponse)(nil), // 19: nightwatch.v1.CleanupExpiredStatusResponse
	(*StartStatusWatcherRequest)(nil),    // 20: nightwatch.v1.StartStatusWatcherRequest
	(*StartStatusWatcherResponse)(nil),   // 21: nightwatch.v1.StartStatusWatcherResponse
	(*StopStatusWatcherRequest)(nil),     // 22: nightwatch.v1.StopStatusWatcherRequest
	(*StopStatusWatcherResponse)(nil),    // 23: nightwatch.v1.StopStatusWatcherResponse
	nil,                                  // 24: nightwatch.v1.JobHealthStatus.MetricsEntry
	nil,                                  // 25: nightwatch.v1.SystemMetrics.ResourceUsageEntry
	(*JobCondition)(nil),                 // 26: nightwatch.v1.JobCondition
}
var file_nightwatch_v1_statustracking_proto_depIdxs = []int32{
	26, // 0: nightwatch.v1.UpdateJobStatusRequest.condition:type_name -> nightwatch.v1.JobCondition
	5,  // 1: nightwatch.v1.TrackRunningJobsResponse.runningJobs:type_name -> nightwatch.v1.RunningJobInfo
	10, // 2: nightwatch.v1.GetBatchStatisticsResponse.batchStats:type_name -> nightwatch.v1.BatchStatusInfo
	24, // 3: nightwatch.v1.JobHealthStatus.metrics:type_name -> nightwatch.v1.JobHealthStatus.MetricsEntry
	13, // 4: nightwatch.v1.JobHealthCheckResponse.healthStatus:type_name -> nightwatch.v1.JobHealthStatus
	25, // 5: nightwatch.v1.SystemMetrics.resourceUsage:type_name -> nightwatch.v1.SystemMetrics.ResourceUsageEntry
	16, // 6: nightwatch.v1.GetSystemMetricsResponse.systemMetrics:type_name -> nightwatch.v1.SystemMetrics
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_nightwatch_v1_statustracking_proto_init() }
func file_nightwatch_v1_statustracking_proto_init() {
	if File_nightwatch_v1_statustracking_proto != nil {
		return
	}
	file_nightwatch_v1_job_proto_init()
	file_nightwatch_v1_statustracking_proto_msgTypes[0].OneofWrappers = []any{}
	file_nightwatch_v1_statustracking_proto_msgTypes[4].OneofWrappers = []any{}
	file_nightwatch_v1_statustracking_proto_msgTypes[7].OneofWrappers = []any{}
	file_nightwatch_v1_statustracking_proto_msgTypes[9].OneofWrappers = []any{}
	file_nightwatch_v1_statustracking_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nightwatch_v1_statustracking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nightwatch_v1_statustracking_proto_goTypes,
		DependencyIndexes: file_nightwatch_v1_statustracking_proto_depIdxs,
		MessageInfos:      file_nightwatch_v1_statustracking_proto_msgTypes,
	}.Build()
	File_nightwatch_v1_statustracking_proto = out.File
	file_nightwatch_v1_statustracking_proto_rawDesc = nil
	file_nightwatch_v1_statustracking_proto_goTypes = nil
	file_nightwatch_v1_statustracking_proto_depIdxs = nil
}
