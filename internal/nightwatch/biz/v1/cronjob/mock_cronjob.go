// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ashwinyue/dcp/internal/nightwatch/biz/v1/cronjob (interfaces: CronJobBiz)
//
// Generated by this command:
//
//	mockgen -destination mock_cronjob.go -package cronjob github.com/ashwinyue/dcp/internal/nightwatch/biz/v1/cronjob CronJobBiz
//

// Package cronjob is a generated GoMock package.
package cronjob

import (
	context "context"
	reflect "reflect"

	v1 "github.com/ashwinyue/dcp/pkg/api/nightwatch/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockCronJobBiz is a mock of CronJobBiz interface.
type MockCronJobBiz struct {
	ctrl     *gomock.Controller
	recorder *MockCronJobBizMockRecorder
	isgomock struct{}
}

// MockCronJobBizMockRecorder is the mock recorder for MockCronJobBiz.
type MockCronJobBizMockRecorder struct {
	mock *MockCronJobBiz
}

// NewMockCronJobBiz creates a new mock instance.
func NewMockCronJobBiz(ctrl *gomock.Controller) *MockCronJobBiz {
	mock := &MockCronJobBiz{ctrl: ctrl}
	mock.recorder = &MockCronJobBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronJobBiz) EXPECT() *MockCronJobBizMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCronJobBiz) Create(ctx context.Context, rq *v1.CreateCronJobRequest) (*v1.CreateCronJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rq)
	ret0, _ := ret[0].(*v1.CreateCronJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCronJobBizMockRecorder) Create(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCronJobBiz)(nil).Create), ctx, rq)
}

// Delete mocks base method.
func (m *MockCronJobBiz) Delete(ctx context.Context, rq *v1.DeleteCronJobRequest) (*v1.DeleteCronJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, rq)
	ret0, _ := ret[0].(*v1.DeleteCronJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCronJobBizMockRecorder) Delete(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCronJobBiz)(nil).Delete), ctx, rq)
}

// Get mocks base method.
func (m *MockCronJobBiz) Get(ctx context.Context, rq *v1.GetCronJobRequest) (*v1.GetCronJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, rq)
	ret0, _ := ret[0].(*v1.GetCronJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCronJobBizMockRecorder) Get(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCronJobBiz)(nil).Get), ctx, rq)
}

// List mocks base method.
func (m *MockCronJobBiz) List(ctx context.Context, rq *v1.ListCronJobRequest) (*v1.ListCronJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, rq)
	ret0, _ := ret[0].(*v1.ListCronJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCronJobBizMockRecorder) List(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCronJobBiz)(nil).List), ctx, rq)
}

// Update mocks base method.
func (m *MockCronJobBiz) Update(ctx context.Context, rq *v1.UpdateCronJobRequest) (*v1.UpdateCronJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rq)
	ret0, _ := ret[0].(*v1.UpdateCronJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCronJobBizMockRecorder) Update(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCronJobBiz)(nil).Update), ctx, rq)
}
