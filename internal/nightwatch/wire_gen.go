// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package nightwatch

import (
	"github.com/ashwinyue/dcp/internal/nightwatch/biz"
	"github.com/ashwinyue/dcp/internal/nightwatch/cache"
	"github.com/ashwinyue/dcp/internal/nightwatch/pkg/validation"
	"github.com/ashwinyue/dcp/internal/nightwatch/store"
	"github.com/ashwinyue/dcp/internal/nightwatch/syncer"
	"github.com/ashwinyue/dcp/internal/pkg/log"
	"github.com/ashwinyue/dcp/internal/pkg/server"
)

import (
	_ "github.com/ashwinyue/dcp/internal/nightwatch/watcher/all"
)

// Injectors from wire.go:

func InitializeWebServer(config *Config) (server.Server, error) {
	string2 := config.ServerMode
	db, err := ProvideDB(config)
	if err != nil {
		return nil, err
	}
	datastore := store.NewStore(db)
	cacheOptions := ProvideCacheOptions(config)
	logger := ProvideLogger()
	cacheManager, err := cache.NewCacheManager(cacheOptions, logger)
	if err != nil {
		return nil, err
	}
	syncerManager := syncer.NewSyncerManager()
	bizBiz := biz.NewBiz(datastore, cacheManager, syncerManager)
	validator := validation.New(datastore)
	serverConfig := &ServerConfig{
		cfg: config,
		biz: bizBiz,
		val: validator,
	}
	serverServer, err := NewWebServer(string2, serverConfig)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

// ProvideCacheOptions 提供缓存配置给 Wire
func ProvideCacheOptions(cfg *Config) *cache.CacheOptions {
	if cfg.RedisOptions == nil {

		return &cache.CacheOptions{
			Addr:   "localhost:6379",
			DB:     0,
			Prefix: "nightwatch:",
		}
	}
	return &cache.CacheOptions{
		Addr:     cfg.RedisOptions.Addr,
		Password: cfg.RedisOptions.Password,
		DB:       cfg.RedisOptions.Database,
		Prefix:   "nightwatch:",
	}
}

// ProvideLogger 提供日志实例给 Wire
func ProvideLogger() log.Logger {
	return log.New(nil)
}
