// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ashwinyue/dcp/internal/apiserver/biz/v1/user (interfaces: UserBiz)
//
// Generated by this command:
//
//	mockgen -destination mock_user.go -package user github.com/ashwinyue/dcp/internal/apiserver/biz/v1/user UserBiz
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	v1 "github.com/ashwinyue/dcp/pkg/api/apiserver/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUserBiz is a mock of UserBiz interface.
type MockUserBiz struct {
	ctrl     *gomock.Controller
	recorder *MockUserBizMockRecorder
	isgomock struct{}
}

// MockUserBizMockRecorder is the mock recorder for MockUserBiz.
type MockUserBizMockRecorder struct {
	mock *MockUserBiz
}

// NewMockUserBiz creates a new mock instance.
func NewMockUserBiz(ctrl *gomock.Controller) *MockUserBiz {
	mock := &MockUserBiz{ctrl: ctrl}
	mock.recorder = &MockUserBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBiz) EXPECT() *MockUserBizMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserBiz) ChangePassword(ctx context.Context, rq *v1.ChangePasswordRequest) (*v1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, rq)
	ret0, _ := ret[0].(*v1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserBizMockRecorder) ChangePassword(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserBiz)(nil).ChangePassword), ctx, rq)
}

// Create mocks base method.
func (m *MockUserBiz) Create(ctx context.Context, rq *v1.CreateUserRequest) (*v1.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rq)
	ret0, _ := ret[0].(*v1.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserBizMockRecorder) Create(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserBiz)(nil).Create), ctx, rq)
}

// Delete mocks base method.
func (m *MockUserBiz) Delete(ctx context.Context, rq *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, rq)
	ret0, _ := ret[0].(*v1.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserBizMockRecorder) Delete(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserBiz)(nil).Delete), ctx, rq)
}

// Get mocks base method.
func (m *MockUserBiz) Get(ctx context.Context, rq *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, rq)
	ret0, _ := ret[0].(*v1.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserBizMockRecorder) Get(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserBiz)(nil).Get), ctx, rq)
}

// List mocks base method.
func (m *MockUserBiz) List(ctx context.Context, rq *v1.ListUserRequest) (*v1.ListUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, rq)
	ret0, _ := ret[0].(*v1.ListUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserBizMockRecorder) List(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserBiz)(nil).List), ctx, rq)
}

// ListWithBadPerformance mocks base method.
func (m *MockUserBiz) ListWithBadPerformance(ctx context.Context, rq *v1.ListUserRequest) (*v1.ListUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithBadPerformance", ctx, rq)
	ret0, _ := ret[0].(*v1.ListUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithBadPerformance indicates an expected call of ListWithBadPerformance.
func (mr *MockUserBizMockRecorder) ListWithBadPerformance(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithBadPerformance", reflect.TypeOf((*MockUserBiz)(nil).ListWithBadPerformance), ctx, rq)
}

// Login mocks base method.
func (m *MockUserBiz) Login(ctx context.Context, rq *v1.LoginRequest) (*v1.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, rq)
	ret0, _ := ret[0].(*v1.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserBizMockRecorder) Login(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserBiz)(nil).Login), ctx, rq)
}

// RefreshToken mocks base method.
func (m *MockUserBiz) RefreshToken(ctx context.Context, rq *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, rq)
	ret0, _ := ret[0].(*v1.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserBizMockRecorder) RefreshToken(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserBiz)(nil).RefreshToken), ctx, rq)
}

// Update mocks base method.
func (m *MockUserBiz) Update(ctx context.Context, rq *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rq)
	ret0, _ := ret[0].(*v1.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserBizMockRecorder) Update(ctx, rq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserBiz)(nil).Update), ctx, rq)
}
