// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ashwinyue/dcp/internal/apiserver/store (interfaces: IStore,UserStore,PostStore,ConcretePostStore)
//
// Generated by this command:
//
//	mockgen -destination mock_store.go -package store github.com/ashwinyue/dcp/internal/apiserver/store IStore,UserStore,PostStore,ConcretePostStore
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	model "github.com/ashwinyue/dcp/internal/apiserver/model"
	where "github.com/onexstack/onexstack/pkg/store/where"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIStore is a mock of IStore interface.
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
	isgomock struct{}
}

// MockIStoreMockRecorder is the mock recorder for MockIStore.
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance.
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// ConcretePost mocks base method.
func (m *MockIStore) ConcretePost() ConcretePostStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcretePost")
	ret0, _ := ret[0].(ConcretePostStore)
	return ret0
}

// ConcretePost indicates an expected call of ConcretePost.
func (mr *MockIStoreMockRecorder) ConcretePost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcretePost", reflect.TypeOf((*MockIStore)(nil).ConcretePost))
}

// DB mocks base method.
func (m *MockIStore) DB(ctx context.Context, wheres ...where.Where) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range wheres {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DB", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockIStoreMockRecorder) DB(ctx any, wheres ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, wheres...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockIStore)(nil).DB), varargs...)
}

// Post mocks base method.
func (m *MockIStore) Post() PostStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post")
	ret0, _ := ret[0].(PostStore)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockIStoreMockRecorder) Post() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIStore)(nil).Post))
}

// TX mocks base method.
func (m *MockIStore) TX(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TX", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// TX indicates an expected call of TX.
func (mr *MockIStoreMockRecorder) TX(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TX", reflect.TypeOf((*MockIStore)(nil).TX), ctx, fn)
}

// User mocks base method.
func (m *MockIStore) User() UserStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(UserStore)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockIStoreMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIStore)(nil).User))
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
	isgomock struct{}
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStore) Create(ctx context.Context, obj *model.UserM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserStoreMockRecorder) Create(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStore)(nil).Create), ctx, obj)
}

// Delete mocks base method.
func (m *MockUserStore) Delete(ctx context.Context, opts *where.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserStoreMockRecorder) Delete(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserStore)(nil).Delete), ctx, opts)
}

// Get mocks base method.
func (m *MockUserStore) Get(ctx context.Context, opts *where.Options) (*model.UserM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, opts)
	ret0, _ := ret[0].(*model.UserM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserStoreMockRecorder) Get(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserStore)(nil).Get), ctx, opts)
}

// List mocks base method.
func (m *MockUserStore) List(ctx context.Context, opts *where.Options) (int64, []*model.UserM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.UserM)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUserStoreMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserStore)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockUserStore) Update(ctx context.Context, obj *model.UserM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserStoreMockRecorder) Update(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStore)(nil).Update), ctx, obj)
}

// MockPostStore is a mock of PostStore interface.
type MockPostStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostStoreMockRecorder
	isgomock struct{}
}

// MockPostStoreMockRecorder is the mock recorder for MockPostStore.
type MockPostStoreMockRecorder struct {
	mock *MockPostStore
}

// NewMockPostStore creates a new mock instance.
func NewMockPostStore(ctrl *gomock.Controller) *MockPostStore {
	mock := &MockPostStore{ctrl: ctrl}
	mock.recorder = &MockPostStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostStore) EXPECT() *MockPostStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostStore) Create(ctx context.Context, obj *model.PostM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostStoreMockRecorder) Create(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostStore)(nil).Create), ctx, obj)
}

// Delete mocks base method.
func (m *MockPostStore) Delete(ctx context.Context, opts *where.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostStoreMockRecorder) Delete(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostStore)(nil).Delete), ctx, opts)
}

// Get mocks base method.
func (m *MockPostStore) Get(ctx context.Context, opts *where.Options) (*model.PostM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, opts)
	ret0, _ := ret[0].(*model.PostM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPostStoreMockRecorder) Get(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostStore)(nil).Get), ctx, opts)
}

// List mocks base method.
func (m *MockPostStore) List(ctx context.Context, opts *where.Options) (int64, []*model.PostM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.PostM)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPostStoreMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPostStore)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockPostStore) Update(ctx context.Context, obj *model.PostM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPostStoreMockRecorder) Update(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostStore)(nil).Update), ctx, obj)
}

// MockConcretePostStore is a mock of ConcretePostStore interface.
type MockConcretePostStore struct {
	ctrl     *gomock.Controller
	recorder *MockConcretePostStoreMockRecorder
	isgomock struct{}
}

// MockConcretePostStoreMockRecorder is the mock recorder for MockConcretePostStore.
type MockConcretePostStoreMockRecorder struct {
	mock *MockConcretePostStore
}

// NewMockConcretePostStore creates a new mock instance.
func NewMockConcretePostStore(ctrl *gomock.Controller) *MockConcretePostStore {
	mock := &MockConcretePostStore{ctrl: ctrl}
	mock.recorder = &MockConcretePostStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcretePostStore) EXPECT() *MockConcretePostStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConcretePostStore) Create(ctx context.Context, obj *model.PostM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockConcretePostStoreMockRecorder) Create(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConcretePostStore)(nil).Create), ctx, obj)
}

// Delete mocks base method.
func (m *MockConcretePostStore) Delete(ctx context.Context, opts *where.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConcretePostStoreMockRecorder) Delete(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConcretePostStore)(nil).Delete), ctx, opts)
}

// Get mocks base method.
func (m *MockConcretePostStore) Get(ctx context.Context, opts *where.Options) (*model.PostM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, opts)
	ret0, _ := ret[0].(*model.PostM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConcretePostStoreMockRecorder) Get(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConcretePostStore)(nil).Get), ctx, opts)
}

// List mocks base method.
func (m *MockConcretePostStore) List(ctx context.Context, opts *where.Options) (int64, []*model.PostM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.PostM)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockConcretePostStoreMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConcretePostStore)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockConcretePostStore) Update(ctx context.Context, obj *model.PostM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockConcretePostStoreMockRecorder) Update(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConcretePostStore)(nil).Update), ctx, obj)
}
